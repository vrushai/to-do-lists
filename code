<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>TaskVerse Super App</title>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;700&family=Open+Sans&display=swap" rel="stylesheet">
<style>
*{box-sizing:border-box;margin:0;padding:0;}
body{font-family:'Open Sans',sans-serif;background:#f0f4f8;}
header{background:linear-gradient(90deg,#4facfe,#00f2fe);color:white;text-align:center;padding:35px;border-bottom-left-radius:25px;border-bottom-right-radius:25px;box-shadow:0 5px 20px rgba(0,0,0,0.2);}
header h1{font-family:'Montserrat',sans-serif;font-size:2.5em;margin-bottom:8px;}
header p{font-size:1.2em;opacity:0.85;}
nav{display:flex;justify-content:center;gap:20px;margin:25px auto;max-width:700px;flex-wrap:wrap;}
nav button{padding:12px 20px;border:none;border-radius:12px;background:#4facfe;color:white;cursor:pointer;transition:0.3s;font-weight:bold;font-size:1em;}
nav button:hover{background:#00f2fe;}
section{display:none;background:white;margin:25px auto;padding:30px;border-radius:20px;max-width:700px;box-shadow:0 5px 20px rgba(0,0,0,0.15);}
section.active{display:block;}
h2{margin-bottom:20px;color:#333;font-family:'Montserrat',sans-serif;font-size:1.8em;}
.input-group{display:flex;gap:15px;margin-bottom:20px;}
.input-group input{flex:1;padding:15px;border-radius:12px;border:1px solid #ddd;font-size:1.1em;}
.input-group button{padding:15px 25px;background:#4facfe;color:white;border:none;border-radius:12px;cursor:pointer;font-weight:bold;transition:0.3s;font-size:1.1em;}
.input-group button:hover{background:#00f2fe;}
.card{display:flex;align-items:center;justify-content:space-between;gap:15px;background:#f9f9f9;padding:18px;border-radius:12px;margin-bottom:12px;transition:0.2s;font-size:1.1em;}
.card:hover{background:#f1f5f9;}
.card.completed span{text-decoration:line-through;color:gray;}
.card span{flex:1;font-size:1.1em;}
.delete-btn{background:transparent;border:none;font-size:1.4em;color:red;cursor:pointer;}
.progress{width:100%;height:16px;background:#ddd;border-radius:12px;margin-top:8px;}
.progress-bar{height:100%;width:0%;background:#4facfe;border-radius:12px;transition:0.4s;}
.stats{display:flex;justify-content:space-around;max-width:700px;margin:25px auto;background:white;padding:20px;border-radius:18px;box-shadow:0 4px 15px rgba(0,0,0,0.15);font-weight:bold;position:relative;font-size:1.2em;}
#calendarGrid{display:grid;grid-template-columns:repeat(7,1fr);gap:8px;text-align:center;margin-top:15px;}
.day{background:#f9f9f9;padding:18px;border-radius:10px;cursor:pointer;font-size:1.1em;transition:0.2s;}
.day:hover{background:#e0f0ff;}
.day.selected{background:#4facfe;color:white;font-weight:bold;}
.day.weekend{color:#ff5252;}
input[type="checkbox"]{width:22px;height:22px;cursor:pointer;}
.popup{position:absolute;top:10px;right:10px;background:#4facfe;color:white;padding:12px 18px;border-radius:12px;opacity:0;transform:translateY(-25px);transition:0.5s;pointer-events:none;font-size:1.1em;}
.popup.show{opacity:1;transform:translateY(0);}
.badge{position:absolute;top:60px;left:50%;transform:translateX(-50%);background:#ff9800;color:white;padding:12px 25px;border-radius:18px;font-weight:bold;opacity:0;transition:0.5s;font-size:1.2em;}
.badge.show{opacity:1;}
#resetBtn{display:block;margin:20px auto;padding:15px 25px;background:#ff5252;color:white;border:none;border-radius:12px;font-weight:bold;cursor:pointer;transition:0.3s;font-size:1.1em;}
#resetBtn:hover{background:#ff1744;}
#weeklyGrid{display:none;gap:10px;}
</style>
</head>
<body>

<header>
<h1>üåü TaskVerse Super App</h1>
<p>All-in-One To-Do, Habits, Planner & Gamification</p>
</header>

<nav>
<button onclick="showSection('todo')">‚úÖ To-Do</button>
<button onclick="showSection('habits')">üî• Habits</button>
<button onclick="showSection('calendar')">üìÖ Planner</button>
</nav>

<button id="resetBtn" onclick="resetAll()">‚ôªÔ∏è Reset All</button>

<!-- To-Do -->
<section id="todo" class="active">
<h2>‚úÖ To-Do List</h2>
<div class="input-group">
<input type="text" id="taskInput" placeholder="‚úçÔ∏è Type a new task...">
<button onclick="addTask()">Add Task</button>
</div>
<div id="taskList"></div>
</section>

<!-- Habits -->
<section id="habits">
<h2>üî• Habit Tracker</h2>
<div class="input-group">
<input type="text" id="habitInput" placeholder="‚úçÔ∏è Type a new habit...">
<button onclick="addHabit()">Add Habit</button>
</div>
<div id="habitList"></div>
<div class="habit-progress">
<p>Today's Habits Completed: <span id="habitDone">0</span>/<span id="habitTotal">0</span></p>
<div class="progress"><div class="progress-bar" id="habitBar"></div></div>
</div>
</section>

<!-- Calendar / Planner -->
<section id="calendar">
<h2>üìÖ Planner</h2>
<div style="display:flex;justify-content:center;gap:15px;margin-bottom:10px;">
<button onclick="showMonthly()" style="padding:10px 20px;border-radius:10px;background:#4facfe;color:white;border:none;font-weight:bold;cursor:pointer;">Monthly View</button>
<button onclick="showWeeklyWithHabits()" style="padding:10px 20px;border-radius:10px;background:#00f2fe;color:white;border:none;font-weight:bold;cursor:pointer;">Weekly View</button>
</div>

<div id="calendarContainer">
<div id="calendarGrid"></div>
<div id="weeklyGrid"></div>
</div>

<div class="input-group" style="margin-top:20px;">
<input type="text" id="plannerTaskInput" placeholder="Add a task for selected day...">
<button onclick="addPlannerTask()">Add</button>
</div>
<div id="plannerTaskList" style="margin-top:15px;"></div>
<p style="margin-top:15px;">Click a day to view/add tasks for that day.</p>
</section>

<div class="stats">
<p>üå≥ Trees: <span id="trees">0</span></p>
<p>‚≠ê XP: <span id="xp">0</span></p>
</div>

<div id="popup" class="popup"></div>
<div id="badge" class="badge"></div>

<!-- Day modal -->
<div id="dayModal" style="display:none;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:25px;border-radius:20px;box-shadow:0 5px 20px rgba(0,0,0,0.3);max-width:400px;width:90%;z-index:1000;">
<h3 id="modalTitle">Tasks for Day</h3>
<div class="input-group">
<input type="text" id="modalTaskInput" placeholder="Add a new task...">
<button onclick="addModalTask()">Add</button>
</div>
<div id="modalTaskList" style="margin-top:15px;"></div>
<button onclick="closeModal()" style="margin-top:15px;padding:10px 20px;background:#ff5252;color:white;border:none;border-radius:10px;font-weight:bold;cursor:pointer;">Close</button>
</div>
<div id="modalOverlay" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.4);z-index:999;"></div>

<script>
// Globals
let xp=0, trees=0, habitCount=0, habitsDone=0, level=1;
let plannerTasks={}, selectedDay=null, currentModalDay=null;
const taskList=document.getElementById('taskList');
const habitList=document.getElementById('habitList');
const calendarGrid=document.getElementById('calendarGrid');
const weeklyGrid=document.getElementById('weeklyGrid');
const today=new Date(), monthDays=new Date(today.getFullYear(), today.getMonth()+1,0).getDate();
let weeklyStartDay = 1;

// Navigation
function showSection(id){
  document.querySelectorAll("section").forEach(s=>s.classList.remove("active"));
  document.getElementById(id).classList.add("active");
}

// To-Do
function addTask(){
  const input=document.getElementById('taskInput'); const text=input.value.trim(); if(!text) return;
  const div=document.createElement('div'); div.className='card';
  const checkbox=document.createElement('input'); checkbox.type='checkbox';
  const span=document.createElement('span'); span.textContent=text;
  const del=document.createElement('button'); del.className='delete-btn'; del.textContent='‚úñ'; del.onclick=()=>div.remove();
  checkbox.addEventListener('change',()=>{if(checkbox.checked){div.classList.add('completed'); gainXP(10); plantTree();} else div.classList.remove('completed');});
  div.appendChild(checkbox); div.appendChild(span); div.appendChild(del); taskList.appendChild(div); input.value='';
}

// Habits
function addHabit(){
  const input=document.getElementById('habitInput'); const text=input.value.trim(); if(!text) return;
  habitCount++; document.getElementById('habitTotal').textContent=habitCount;
  const div=document.createElement('div'); div.className='card';
  const checkbox=document.createElement('input'); checkbox.type='checkbox';
  const span=document.createElement('span'); span.textContent=text+' (Streak: 0)'; let streak=0;
  checkbox.addEventListener('change',()=>{
    if(checkbox.checked){ streak++; habitsDone++; span.textContent=text+' (Streak: '+streak+')'; gainXP(5); plantTree(); updateHabitProgress(); checkbox.checked=false; }
  });
  div.appendChild(checkbox); div.appendChild(span); habitList.appendChild(div); input.value='';
}
function updateHabitProgress(){
  document.getElementById('habitDone').textContent=habitsDone;
  document.getElementById('habitBar').style.width=Math.min((habitsDone/habitCount)*100,100)+'%';
}

// Gamification
function gainXP(amount){ xp+=amount; document.getElementById('xp').textContent=xp; showPopup(`+${amount} XP`); checkLevel(); }
function plantTree(){ trees++; document.getElementById('trees').textContent=trees; showPopup('üå≥ Tree Planted!'); }
function showPopup(text){ const popup=document.getElementById('popup'); popup.textContent=text; popup.classList.add('show'); setTimeout(()=>popup.classList.remove('show'),1000);}
function checkLevel(){ const nextLevel=Math.floor(xp/50)+1; if(nextLevel>level){level=nextLevel; showBadge(`üéâ Level Up! ${level}`); } }
function showBadge(text){ const badge=document.getElementById('badge'); badge.textContent=text; badge.classList.add('show'); setTimeout(()=>badge.classList.remove('show'),1500); }

// Calendar
for(let i=1;i<=monthDays;i++){
  const div=document.createElement('div'); div.className='day'; div.textContent=i;
  const dayOfWeek=new Date(today.getFullYear(), today.getMonth(), i).getDay();
  if(dayOfWeek===0||dayOfWeek===6) div.classList.add('weekend');
  div.onclick=()=>{ document.querySelectorAll('.day').forEach(d=>d.classList.remove('selected')); div.classList.add('selected'); openDayModal(i); };
  calendarGrid.appendChild(div);
}

function addPlannerTask(){
  const input=document.getElementById('plannerTaskInput'); const text=input.value.trim(); if(!text || selectedDay===null) return;
  if(!plannerTasks[selectedDay]) plannerTasks[selectedDay]=[];
  plannerTasks[selectedDay].push({text:text,completed:false}); input.value=''; displayPlannerTasks();
}
function displayPlannerTasks(){
  const listDiv=document.getElementById('plannerTaskList'); listDiv.innerHTML='';
  if(!plannerTasks[selectedDay]) return;
  plannerTasks[selectedDay].forEach((task,index)=>{
    const div=document.createElement('div'); div.className='card';
    const checkbox=document.createElement('input'); checkbox.type='checkbox'; checkbox.checked=task.completed;
    const span=document.createElement('span'); span.textContent=task.text;
    const del=document.createElement('button'); del.className='delete-btn'; del.textContent='‚úñ'; del.onclick=()=>{ plannerTasks[selectedDay].splice(index,1); displayPlannerTasks(); }
    checkbox.addEventListener('change',()=>{task.completed=checkbox.checked;if(task.completed){div.classList.add('completed');gainXP(5);plantTree();} else div.classList.remove('completed');});
    div.appendChild(checkbox); div.appendChild(span); div.appendChild(del); listDiv.appendChild(div);
  });
}

// Day modal
function openDayModal(day){ currentModalDay=day; document.getElementById('modalTitle').textContent='Tasks for Day '+day; document.getElementById('dayModal').style.display='block'; document.getElementById('modalOverlay').style.display='block'; renderModalTasks(); }
function closeModal(){ document.getElementById('dayModal').style.display='none'; document.getElementById('modalOverlay').style.display='none'; currentModalDay=null; }
function renderModalTasks(){
  const listDiv = document.getElementById('modalTaskList'); listDiv.innerHTML = '';
  if(!plannerTasks[currentModalDay]) plannerTasks[currentModalDay]=[];
  plannerTasks[currentModalDay].forEach((task,index)=>{
    const div = document.createElement('div'); div.className='card';
    const checkbox = document.createElement('input'); checkbox.type='checkbox'; checkbox.checked=task.completed;
    const span = document.createElement('span'); span.textContent = task.text;
    const del = document.createElement('button'); del.className='delete-btn'; del.textContent='‚úñ';
    del.onclick = ()=>{ plannerTasks[currentModalDay].splice(index,1); renderModalTasks(); };
    checkbox.addEventListener('change',()=>{
      task.completed = checkbox.checked;
      if(task.completed){ div.classList.add('completed'); gainXP(5); plantTree(); } 
      else div.classList.remove('completed');
    });
    div.appendChild(checkbox); div.appendChild(span); div.appendChild(del);
    listDiv.appendChild(div);
  });
}
function addModalTask(){
  const input = document.getElementById('modalTaskInput');
  const text = input.value.trim();
  if(!text || currentModalDay === null) return;
  plannerTasks[currentModalDay].push({text:text, completed:false});
  input.value = '';
  renderModalTasks();
}

// Reset All
function resetAll(){
  if(!confirm("Are you sure you want to reset everything?")) return;
  document.getElementById('taskList').innerHTML='';
  document.getElementById('habitList').innerHTML='';
  document.getElementById('plannerTaskList').innerHTML='';
  for(let key in plannerTasks) delete plannerTasks[key];
  xp=0; trees=0; habitsDone=0; habitCount=0; level=1;
  document.getElementById('xp').textContent=xp;
  document.getElementById('trees').textContent=trees;
  document.getElementById('habitDone').textContent=habitsDone;
  document.getElementById('habitTotal').textContent=habitCount;
  document.getElementById('habitBar').style.width='0%';
  document.querySelectorAll('.day').forEach(d=>d.classList.remove('selected'));
}

// Weekly view with habits
function showWeeklyWithHabits(){
  document.getElementById('calendarGrid').style.display='none';
  weeklyGrid.style.display='grid';
  weeklyGrid.style.gridTemplateColumns='repeat(7,1fr)';
  weeklyGrid.innerHTML='';
  
  for(let i=weeklyStartDay;i<weeklyStartDay+7;i++){
    if(i>monthDays) break;
    const div = document.createElement('div'); div.className='day';
    div.style.minHeight='120px'; div.style.display='flex'; div.style.flexDirection='column'; div.style.alignItems='center';
    div.style.justifyContent='flex-start'; div.style.padding='10px'; div.style.transition='0.3s';
    div.textContent=i;
    
    // Tasks
    const ul=document.createElement('div'); ul.style.marginTop='10px'; ul.style.width='100%';
    if(!plannerTasks[i]) plannerTasks[i]=[];
    plannerTasks[i].forEach(task=>{
      const tdiv=document.createElement('div'); tdiv.textContent=task.text;
      tdiv.style.background=task.completed?'#ccc':'#4facfe'; tdiv.style.color=task.completed?'#666':'white';
      tdiv.style.borderRadius='8px'; tdiv.style.padding='5px'; tdiv.style.marginBottom='3px'; tdiv.style.fontSize='0.9em';
      tdiv.style.cursor='pointer'; 
      tdiv.addEventListener('click',()=>{
        task.completed=!task.completed;
        tdiv.style.background=task.completed?'#ccc':'#4facfe';
        tdiv.style.color=task.completed?'#666':'white';
        if(task.completed){ gainXP(5); plantTree(); tdiv.style.opacity='0.6'; } else { tdiv.style.opacity='1'; }
      });
      ul.appendChild(tdiv);
    });
    
    // Habits
    const habitDiv=document.createElement('div'); habitDiv.style.marginTop='8px'; habitDiv.style.width='100%';
    for(let h=0;h<habitList.children.length;h++){
      const habitName=habitList.children[h].querySelector('span').textContent.split(' (')[0];
      const hDiv=document.createElement('div'); hDiv.textContent=habitName;
      hDiv.style.background='#28a745'; hDiv.style.color='white'; hDiv.style.borderRadius='8px';
      hDiv.style.padding='5px'; hDiv.style.marginBottom='3px'; hDiv.style.fontSize='0.9em'; hDiv.style.cursor='pointer';
      hDiv.addEventListener('click',()=>{ gainXP(5); plantTree(); hDiv.style.opacity='0.6'; });
      habitDiv.appendChild(hDiv);
    }

    div.appendChild(ul); div.appendChild(habitDiv);
    div.onclick = ()=>{ openDayModal(i); };
    div.onmouseenter=()=>{ div.style.background='#e0f0ff'; };
    div.onmouseleave=()=>{ div.style.background=''; };
    weeklyGrid.appendChild(div);
  }
}

function showMonthly(){ calendarGrid.style.display='grid'; weeklyGrid.style.display='none'; }
</script>

</body>
</html>
